DATA analysis of sales data using mysql queries,hive queries,python,bigquery(google cloud platform)

1.Download sales_data_final(.csv file) from kaggle

2.Install MYSQL WORKBENCH(relational database management system) (open source)

3. set loginid and password

 
4.#MYSQL QUERIES

data modelling using join
testing using constraints



create database sales1;
use sales1;


/*note:you can extract column names and data types using csvkit(generate sql table creation statement from csv file)*/
/*go to cmd and type pip install csvkit \n
csvsql --dialect mysql --snifflimit 100000 sales_data_final.csv>output_sales.sql*/

CREATE TABLE sales_data_final1 (
	order_id VARCHAR(15) NOT NULL, 
	order_date varchar(15) NOT NULL, 
	ship_date varchar(15) NOT NULL, 
	ship_mode VARCHAR(14) NOT NULL, 
	customer_name VARCHAR(22) NOT NULL, 
	segment VARCHAR(11) NOT NULL, 
	state VARCHAR(36) NOT NULL, 
	country VARCHAR(32) NOT NULL, 
	market VARCHAR(6) NOT NULL, 
	region VARCHAR(14) NOT NULL, 
	product_id VARCHAR(16) NOT NULL, 
	category VARCHAR(15) NOT NULL, 
	sub_category VARCHAR(11) NOT NULL, 
	product_name VARCHAR(127) NOT NULL, 
	sales DECIMAL(38, 0) NOT NULL, 
	quantity DECIMAL(38, 0) NOT NULL, 
	discount DECIMAL(38, 3) NOT NULL, 
	profit DECIMAL(38, 5) NOT NULL, 
	shipping_cost DECIMAL(38, 2) NOT NULL, 
	order_priority VARCHAR(8) NOT NULL, 
	`year` DECIMAL(38, 0) NOT NULL
);


select * from sales_data_final1; /*sql query*/
    
    set session sql_mode = '' ;
    
  # (dump data from csv file to mysl table)
   
   load data infile
'C:/sales_data_final.csv'
into table sales_data_final1
fields terminated by ','
enclosed by '"'
lines terminated by '\n'
ignore 1 rows ;

select str_to_date(order_date,'%m/%d/%y') from sales_data_final1 /*str_to_date(inbuilt function)*/

/*add new column i.e order_date_new to table i.e sales_data_final1*/

alter table sales_data_final1
add column order_date_new date after order_date;


update sales_data_final1
set order_date_new = str_to_date(order_date,'%m/%d/%Y');


alter table sales_data_final1
add column ship_date_new date after ship_date;


update sales_data_final1
set ship_date_new = str_to_date(ship_date,'%m/%d/%Y');

select * from sales_data_final1 where ship_date_new = '2011-01-05';

select * from sales_data_final1 where ship_date_new > '2011-01-05';

select * from sales_data_final1 where ship_date_new >= '2011-01-05' and ship_date_new  <= '2011-08-30';

select * from sales_data_final1 where ship_date_new between '2011-01-05' and '2011-08-30';

select now();

select curdate();

select curtime();

select * from sales_data_final1 where ship_date_new < date_sub(now(), interval 1 week);

select date_sub(now(), interval 1 week);

select date_sub(now(),interval 3 day);

select date_sub(now(),interval 3 year);

select year(now());

select dayname(now());

select dayname('2022-07-20 21:10:30');

alter table sales_data_final1
add column flag date after order_id;

update sales_data_final1
set flag = now();

select * from sales_data_final1;

ALTER table sales_data_final1
modify column year datetime;

alter table sales_data_final1
ADD column Year_New date;

alter table sales_data_final1
ADD column Month_New date;

alter table sales_data_final1
add column Day_New date;

UPDATE sales_data_final1
set month_new=str_to_date(order_date,'%m');

update sales_data_final1
set day_new=str_to_date(order_date,'%d');

update sales_data_final1
set year_new=str_to_date(order_date,'%y');

select * from sales_data_final1;

select * from sales_data_final1 limit 5;

alter table sales_data_final1
modify column Year_New int;

alter table sales_data_final1
modify column Month_New int;

alter table sales_data_final1
modify column Day_New int;

select * from sales_data_final1 limit 5;

update sales_data_final1 set Month_new= month(order_date_new);

update sales_data_final1 set day_new= day(order_date_new);

update sales_data_final1 set year_new= year(order_date_new);

select * from sales_data_final1;

alter table sales_data_final1
modify column year int;

update sales_data_final1 set year= year(order_date_new);

select year_new ,avg(sales) from sales_data_final1 group by year_new;

select year_new, sum(sales) from sales_data_final1 group by year_new;

select year_new, min(sales) from sales_data_final1 group by year_new;

select year_new, max(sales) from sales_data_final1 group by year_new;

select year_new , sum(quantity) from sales_data_final1 group by year_new;

select(sales*discount+shipping_cost) as CTC from sales_data_final1;

select if(discount > 0 , 'no' ,'yes') as discount_flag from sales_data_final1;

select order_id ,discount, if(discount > 0 ,'yes','no') as discount_flag from sales_data_final1;

alter table sales_data_final1
modify column discount_flag varchar(20) after discount;

select * from  sales_data_final1;
select discount_flag, count(*) from sales_data_final1 group by discount_flag;

select count(*) from sales_data_final1 where discount > 0;


update sales_data_final1 
set discount_flag = if(discount > 0 ,'yes','no');


use sales1;

select * from sales_data_final1;

DELIMITER $$ 
create function add_to_col(a int)
returns int
deterministic
begin
declare b int ;
set b = a + 10 ;
return b ;
end$$   

select max(sales) from sales_data_final1;sales_data_final1;

select add_to_col(15);

select * from sales_data_final1;

select quantity from sales_data_final1;
select quantity + 10 from sales_data_final1;

select quantity ,add_to_col(quantity) from sales_data_final1;

select profit, discount  , final_profits(profit, discount) from sales_data_final1 ; 

DELIMITER $$
create function final_profits_real(profit decimal(20,6) , discount decimal(20,6) , sales decimal(20,6) )
returns int
Deterministic
Begin 
Declare final_profit int ;
set final_profit = profit - sales * discount ;
return final_profit;
end $$

select profit, discount  ,sales ,  final_profits_real(profit, discount,sales) from sales_data_final1 ; 

select add_to_col(15)

select * from sales_data_final1

select quantity , add_to_col(quantity ) from sales_data_final1




DELIMITER $$
create function int_to_str(a INT);
returns varchar(20)
DETERMINISTIC
BEGIN 
DECLARE b varchar(20) ;
set b = a ;
return b ;
end $$


DELIMITER &&
create function int_to_str (a int)
returns varchar(30)
DETERMINISTIC
begin
declare b varchar(30);
set b = a;
return b;
end&&

select int_to_str(45) 

select * from sales_data_final1 

select quantity, int_to_str(quantity) from sales_data_final1 ; 

select max(sales) , min(sales) from sales_data_final1 


/*1  - 100 - super affordable product 
100-300 - affordable 
300 - 600 - moderate price 
600 + - expensive */


DELIMITER &&
create function mark_sales2(sales int ) 
returns varchar(30)
DETERMINISTIC
begin 
declare flag_sales varchar(30); 
if sales  <= 100  then 
set flag_sales = "super affordable product" ;
elseif sales > 100 and sales < 300 then 
set flag_sales = "affordable" ;
elseif sales >300 and sales < 600 then 
set flag_sales = "moderate price" ;
else 
set flag_sales = "expensive" ;
end if ;
return flag_sales;
end;


select mark_sales2(100)

select sales , mark_sales2(sales ) from sales_data_final1 ; 



create table loop_table(val int)


Delimiter $$
create procedure insert_data()
Begin
set @var  = 10 ;
generate_data : loop
insert into loop_table values (@var);
set @var = @var + 1  ;
if @var  = 100 then 
	leave generate_data;
end if ;
end loop generate_data;
End $$

call insert_data()

select * from loop_table




